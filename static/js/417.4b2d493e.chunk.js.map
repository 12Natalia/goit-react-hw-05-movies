{"version":3,"file":"static/js/417.4b2d493e.chunk.js","mappings":"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","sources":["api/api.js","components/SharedLayout/LoadingIndicator.jsx","components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails.styled.js","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '0894a3a8e07707c6da6855dbe93d4ef8';\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const fetchMovieByName = async query => {\n  const { data } = await axios.get(\n    `${baseURL}/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n\n  return data;\n};\n\nexport const fetchMovieById = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return data;\n};\n","import { ThreeCircles } from 'react-loader-spinner';\n\nexport const LoadingIndicator = () => {\n  return (\n    <ThreeCircles\n      height=\"300\"\n      width=\"100%\"\n      color=\"#3f51b5\"\n      wrapperStyle={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n        margin: '0 auto',\n        position: 'fixed',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"three-circles-rotating\"\n      outerCircleColor=\"#008001\"\n      innerCircleColor=\"#ADFF2F\"\n      middleCircleColor=\"#008001\"\n    />\n  );\n};\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MovieCardContainer = styled.div`\n  display: flex;\n  gap: 40px;\n  margin-top: 20px;\n`;\n\nexport const Img = styled.img`\n  height: 600px;\n  width: 400px;\n`;\n\nexport const MovieInfo = styled.div`\n  padding-top: 20px;\n  max-width: 1100px;\n`;\n\nexport const MovieName = styled.h2`\n  margin-bottom: 20px;\n`;\n\nexport const MovieInfoText = styled.p`\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const MovieInfoTextBold = styled.span`\n  display: block;\n  margin-bottom: 20px;\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const MoreInfoWrapper = styled.div`\n  margin-top: 20px;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  border-top: 1px solid #d3d3d3;\n  border-bottom: 1px solid #d3d3d3;\n`;\n\nexport const MoreInfoHeader = styled.h3`\n  font-size: 25px;\n  font-weight: 500;\n`;\n\nexport const List = styled.ul`\n  margin-top: 20px;\n  display: flex;\n  gap: 20px;\n  font-size: 18px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const StyledLink = styled(Link)`\n  font-size: 16px;\n  margin-right: 5px;\n  padding: 5px 15px;\n  border: 1px solid #000000;\n  border-radius: 6px;\n  background-color: #ADFF2F;\n  box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2);\n  transition: all 0.2s ease-in-out;\n  text-decoration: none;\n  color: #000000;\n\n  &:hover,\n  &:focus {\n    background-color: #008001;\n    color: #ffffff;\n    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);\n  }\n`;","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  Img,\n  List,\n  ListItem,\n  MoreInfoHeader,\n  MoreInfoWrapper,\n  MovieCardContainer,\n  MovieInfo,\n  MovieInfoText,\n  MovieInfoTextBold,\n  MovieName,\n  StyledLink,\n} from './MovieCard.styled';\nimport { LoadingIndicator } from 'components/SharedLayout/LoadingIndicator';\n\nconst MovieCard = ({ movie }) => {\n  const { title, release_date, poster_path, vote_average, overview, genres } =\n    movie;\n  const location = useLocation();\n  const releaseDate = new Date(release_date);\n\n  const releaseYear = isNaN(releaseDate)\n    ? 'Unknown'\n    : releaseDate.getFullYear();\n\n  const posterUrl = poster_path\n    ? `https://image.tmdb.org/t/p/w400/${poster_path}`\n    : 'https://via.placeholder.com/400x600.png?text=Poster+Not+Available';\n\n  const userScore = vote_average\n    ? `${(vote_average * 10).toFixed(0)}%`\n    : 'Not rated yet';\n\n  if (!title) {\n    return <LoadingIndicator />;\n  }\n\n  return (\n    <>\n      <MovieCardContainer>\n        <Img src={posterUrl} alt={`${title} poster`} />\n\n        <MovieInfo>\n          <MovieName>\n            {title ?? 'Unknown'} ({releaseYear})\n          </MovieName>\n          <MovieInfoText>User Score: {userScore}</MovieInfoText>\n          <MovieInfoText>\n            <MovieInfoTextBold>Overview:</MovieInfoTextBold> {overview}\n          </MovieInfoText>\n\n          {genres && genres.length > 0 && (\n            <MovieInfoText>\n              <MovieInfoTextBold>Genres:</MovieInfoTextBold>\n              {genres.map(genre => genre.name).join(', ')}\n            </MovieInfoText>\n          )}\n        </MovieInfo>\n      </MovieCardContainer>\n\n      <MoreInfoWrapper>\n        <MoreInfoHeader>Additional information</MoreInfoHeader>\n\n        <List>\n          <ListItem>\n            <StyledLink\n              to=\"cast\"\n              state={{ from: location?.state?.from ?? '/' }}\n            >\n              Cast\n            </StyledLink>\n          </ListItem>\n\n          <ListItem>\n            <StyledLink\n              to=\"reviews\"\n              state={{ from: location?.state?.from ?? '/' }}\n            >\n              Reviews\n            </StyledLink>\n          </ListItem>\n        </List>\n      </MoreInfoWrapper>\n    </>\n  );\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({ name: PropTypes.string.isRequired })\n    ),\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 20px 40px;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  border: 1px solid #000000;\n  border-radius: 6px;\n  background-color: #ADFF2F;\n  transition: color 0.2s ease-in-out, background-color 0.2s ease-in-out;\n\n  &:hover,\n  &:focus {\n    background-color: #008001;\n    color: #ffffff;\n  }\n`;","import { Suspense } from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams, Outlet, useLocation, Link } from 'react-router-dom';\nimport { BiArrowBack } from 'react-icons/bi';\nimport { fetchMovieById } from '../api/api';\nimport MovieCard from '../components/MovieCard/MovieCard';\nimport { Button, Container } from './MovieDetails.styled';\nimport { LoadingIndicator } from 'components/SharedLayout/LoadingIndicator';\n\nconst MovieDelails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const [selectedMovie, setSelectedMovie] = useState({});\n\n  useEffect(() => {\n    const fetchSelectedMovie = async movieId => {\n      try {\n        const movieData = await fetchMovieById(movieId);\n        setSelectedMovie(movieData);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchSelectedMovie(movieId);\n  }, [movieId]);\n\n  return (\n    <main>\n      <Container>\n        <Link to={location?.state?.from ?? '/'}>\n          <Button type=\"button\">\n            <BiArrowBack\n              style={{ width: '25px', height: '25px', display: 'inline-block' }}\n            />\n            Go back\n          </Button>\n        </Link>\n\n        <MovieCard movie={selectedMovie} />\n\n        <Suspense fallback={<LoadingIndicator />}>\n          <Outlet />\n        </Suspense>\n      </Container>\n    </main>\n  );\n};\n\nexport default MovieDelails;\n"],"names":["baseURL","API_KEY","fetchTrendMovies","axios","data","fetchMovieByName","query","fetchMovieById","movieId","fetchMovieCast","fetchMovieReviews","LoadingIndicator","height","width","color","wrapperStyle","display","justifyContent","alignItems","margin","position","top","left","right","bottom","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","MovieCardContainer","styled","Img","MovieInfo","MovieName","MovieInfoText","MovieInfoTextBold","MoreInfoWrapper","MoreInfoHeader","List","ListItem","StyledLink","Link","movie","title","release_date","poster_path","vote_average","overview","genres","location","useLocation","releaseDate","Date","releaseYear","isNaN","getFullYear","posterUrl","userScore","toFixed","src","alt","length","map","genre","name","join","to","state","from","Container","Button","useParams","useState","selectedMovie","setSelectedMovie","useEffect","fetchSelectedMovie","movieData","console","log","type","style","Suspense","fallback"],"sourceRoot":""}